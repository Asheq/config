;; User keymap
;; -----------------------------
;; Keymaps are stored as a set of diffs that are merged together together
;; to create the final set of keys. You can modify these diffs to either add
;; or subtract bindings.
;;
;; Like behaviors, keys are bound by tag. When objects with those tags are active
;; the key bindings are live. Keys can be bound to any number of Light Table commands,
;; allowing you the flexibility to execute multiple operations together. To see a list
;; of all the commands you can execute, start typing a word related to the thing you
;; want to do in between the square brackets (e.g. type "editor").

{:+ {:app {
           "cmd-shift-f" [:searcher.show]
           }

     ;; https://github.com/marijnh/CodeMirror/blob/master/keymap/vim.js
     :editor.keys.vim.normal { "^" [:workspace.show]
                        ;;"K" [:editor.doc.toggle]
                        "space" [:show-commandbar-transient]
                        "ctrl-p" [:show-commandbar-transient]
                        "alt-x" [:show-commandbar-transient]
                        "(" [(:paredit.select.parent "(")
                                  :paredit.select.clear]
                        ")" [(:paredit.select.parent ")")
                                  :paredit.select.clear]
                        }


     :editor {"alt-w" [:editor.watch.watch-selection]
              "alt-shift-w" [:editor.watch.unwatch]}
     :editor.cljs {"alt-m" [(:editor.watch.custom-watch-selection "(let [start (.getTime (js/Date.))
                                                                  res (do __SELECTION__)]
                                                                  __|(str (- (.getTime (js/Date.)) start) \" ms\")|__
                                                                  res) " {:class "timed" :verbatim true})]
                   "alt-l" [(:editor.watch.custom-watch-selection "(let [result (do __SELECTION__)] (prn __SELECTION*__ result) __|result|__ result)" {})]}

     ;;if I highlight an expression and press alt-e it will macroexpand the expression.
     ;;Alt-shift-b will benchmark the expression using criterium.
     ;;Alt-d will display the java bytecode for the resulting value.
     ;;Alt-m will add a watch that will display the time the expression took every time it is executed.
     ;;This makes it really easy to add new features to your editor with very little effort.
     ;;You can do the same in any supported language (currently js, python, clj, cljs).
     :editor.clj {"alt-enter" [(:eval.custom "(with-out-str (clojure.pprint/write __SELECTION__ :suppress-namespaces false :dispatch clojure.pprint/code-dispatch))" {:result-type :inline :verbatim true})]
              "alt-p" [(:eval.custom "(with-out-str __SELECTION__)" {:result-type :inline :verbatim true})]
              "alt-e" [(:eval.custom " (with-out-str (clojure.pprint/write (macroexpand-1 '__SELECTION__) :suppress-namespaces false :dispatch clojure.pprint/code-dispatch))" {:result-type :replace :verbatim true})]
              "alt-shift-e" [(:eval.custom " (with-out-str (clojure.pprint/write (clojure.walk/macroexpand-all '__SELECTION__) :suppress-namespaces false :dispatch clojure.pprint/code-dispatch))" {:result-type :replace :verbatim true})]
              "alt-d" [(:eval.custom "(do (require '[no.disassemble]) (no.disassemble/disassemble (do __SELECTION__)))" {:result-type :inline :verbatim true})]
              "alt-t" [(:eval.custom "(type (do __SELECTION__))" {:result-type :inline})]
              "alt-b" [(:eval.custom "(with-out-str (time (do __SELECTION__)))" {:result-type :inline :verbatim true})]
              "alt-shift-b" [(:eval.custom "(do (require '[criterium.core]) (with-out-str (criterium.core/bench (do __SELECTION__))))" {:result-type :inline :verbatim true})]
              "alt-l" [(:editor.watch.custom-watch-selection "(let [result (do __SELECTION__)] (prn __SELECTION*__ result) __|result|__ result)" {})]
              "alt-m" [(:editor.watch.custom-watch-selection "(let [start (java.lang.System/nanoTime)
                                                                    res (do __SELECTION__)]
                                                                 __|(str (float (/ (- (java.lang.System/nanoTime) start) 1000000)) \" ms\")|__
                                                                 res)" {:class "timed" :verbatim true})]}
     }

      :editor.keys.hinting.active {"tab" [:auto-complete]
                                  "enter" [:passthrough]}
 }
