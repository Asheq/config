;; User behaviors
;; -----------------------------
;; Behaviors are stored as a set of diffs that are merged together
;; to create the final set of functionality that makes up Light Table. You can
;; modify these diffs to either add or subtract functionality.
;;
;; Behaviors are added to tags, objects with those tags then automatically gain
;; whatever logic the behavior imparts. To see a list of user-level behaviors,
;; start typing a word related to the functionality you want in between the square
;; brackets (e.g. "theme").
;;
;; chris granger's behaviors file: https://gist.github.com/ibdknox/7090341
;; jamii: https://github.com/jamii/lt-config

{:+ {
     ;; The app tag is kind of like global scope. You assign behaviors that affect
     ;; all of Light Table here
     :app [
           (:lt.objs.style/set-skin "dark")
           (:lt.objs.files/file.ignore-pattern "(^\\..*)|\\.class$|target/|svn|cvs|\\.git|\\.pyc|~|\\.swp|\\.jar|.DS_Store|_site/|_cache/|__pycache__")
           ;;(:lt.objs.app/run-on-init :window.fullscreen)
           ;; "map-keys is for if you want to continue to play entirely in the vim.js world"
           (:lt.plugins.vim/map-keys
            {
             "-" "$"
             "0" "^"
             "j" "gj"
             "k" "gk"
             "ZQ" ":ltexec quit"
             "K"  ":ltexec editor.doc.toggle"
             "gwv"  ":ltexec tabset.new"
             "gwh"  ":ltexec tabset.prev"
             "gwl"  ":ltexec tabset.next"
             "gwH"  ":ltexec tabs.move-prev-tabset"
             "gwL"  ":ltexec tabs.move-next-tabset"
             "gt"   ":ltexec tabs.next"
             "gcc" ":ltexec toggle-comment-selection"

             ;; sexp manipulation
             "gss" ":ltexec paredit.grow.right"
             "gsS" ":ltexec paredit.grow.left"
             "gsb" ":ltexec paredit.shrink.right"
             "gsB" ":ltexec paredit.shrink.left"
             })
           ]

     ;; The editor tag is applied to all editors
     :editor [:lt.objs.editor/no-wrap
              :lt.objs.editor/highlight-current-line
              :lt.plugins.vim/activate-vim
              :lt.plugins.auto-complete/auto-show-on-input ]

     :editor.clj.instarepl [:lt.plugins.rainbow-parens/rainbow-parens
                            (:lt.objs.langs.clj/print-length 1000)
                            :lt.objs.langs.clj/auto-complete]
     :editor.cljs [:lt.plugins.rainbow-parens/rainbow-parens
                   :lt.objs.langs.clj/auto-complete]

     ;; Here we can add behaviors to just clojure editors
     :editor.clojure [(:lt.objs.langs.clj/print-length 1000)]
     }

 ;; use the subtract key to remove behavior that may get added by another diff
 :- {:app [:lt.objs.intro/show-intro
           :lt.objs.menu/create-menu]}

 }
